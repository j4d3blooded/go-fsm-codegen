// Code generated by go generate; DO NOT EDIT.

package main

import (
	"fmt"
	"log/slog"
	"time"
)

type State uint8

const (
	STATE_IDLE State = iota
	STATE_MEOWING
	STATE_PURRING
	STATE_RUNNING
	STATE_SLEEPING
	STATE_WALKING
)

func NewFSM(startState State) *CatFSM {
	return &CatFSM{
		startState,
		map[uint8]any{},
	}
}

type CatFSM struct {
	State  State
	_Hooks map[uint8]any
}

type EventRunHook func()

func (fsm *CatFSM) Run() error {
	switch fsm.State {
	case STATE_IDLE, STATE_WALKING:
	default:
		return fmt.Errorf("attempted to invoke event Run from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State).Info("User has transitioned to STATE_RUN")
	hook := fsm._Hooks[0].(EventRunHook)
	hook()
	fsm.State = STATE_RUNNING
	return nil
}

func (fsm *CatFSM) SetRunHook(hook EventRunHook) {
	fsm._Hooks[0] = hook
}

type EventStop_MeowingHook func()

func (fsm *CatFSM) Stop_Meowing() error {
	switch fsm.State {
	case STATE_MEOWING:
	default:
		return fmt.Errorf("attempted to invoke event Stop_Meowing from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State).Info("User has transitioned to STATE_STOP_MEOWING")
	hook := fsm._Hooks[1].(EventStop_MeowingHook)
	hook()
	fsm.State = STATE_IDLE
	return nil
}

func (fsm *CatFSM) SetStop_MeowingHook(hook EventStop_MeowingHook) {
	fsm._Hooks[1] = hook
}

type EventPurrHook func(Duration time.Time)

func (fsm *CatFSM) Purr(Duration time.Time) error {
	switch fsm.State {
	case STATE_WALKING, STATE_RUNNING, STATE_IDLE:
	default:
		return fmt.Errorf("attempted to invoke event Purr from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State, "Duration", Duration).Info("User has transitioned to STATE_PURR")
	hook := fsm._Hooks[2].(EventPurrHook)
	hook(Duration)
	fsm.State = STATE_PURRING
	return nil
}

func (fsm *CatFSM) SetPurrHook(hook EventPurrHook) {
	fsm._Hooks[2] = hook
}

type EventStopHook func()

func (fsm *CatFSM) Stop() error {
	switch fsm.State {
	case STATE_WALKING, STATE_RUNNING:
	default:
		return fmt.Errorf("attempted to invoke event Stop from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State).Info("User has transitioned to STATE_STOP")
	hook := fsm._Hooks[3].(EventStopHook)
	hook()
	fsm.State = STATE_IDLE
	return nil
}

func (fsm *CatFSM) SetStopHook(hook EventStopHook) {
	fsm._Hooks[3] = hook
}

type EventWalkHook func()

func (fsm *CatFSM) Walk() error {
	switch fsm.State {
	case STATE_IDLE, STATE_RUNNING:
	default:
		return fmt.Errorf("attempted to invoke event Walk from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State).Info("User has transitioned to STATE_WALK")
	hook := fsm._Hooks[4].(EventWalkHook)
	hook()
	fsm.State = STATE_WALKING
	return nil
}

func (fsm *CatFSM) SetWalkHook(hook EventWalkHook) {
	fsm._Hooks[4] = hook
}

type EventWake_UpHook func()

func (fsm *CatFSM) Wake_Up() error {
	switch fsm.State {
	case STATE_SLEEPING:
	default:
		return fmt.Errorf("attempted to invoke event Wake_Up from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State).Info("User has transitioned to STATE_WAKE_UP")
	hook := fsm._Hooks[5].(EventWake_UpHook)
	hook()
	fsm.State = STATE_IDLE
	return nil
}

func (fsm *CatFSM) SetWake_UpHook(hook EventWake_UpHook) {
	fsm._Hooks[5] = hook
}

type EventPanicHook func(Cause string)

func (fsm *CatFSM) Panic(Cause string) error {
	switch fsm.State {
	case STATE_RUNNING:
	default:
		return fmt.Errorf("attempted to invoke event Panic from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State, "Cause", Cause).Info("User has transitioned to STATE_PANIC")
	hook := fsm._Hooks[6].(EventPanicHook)
	hook(Cause)
	fsm.State = STATE_IDLE
	return nil
}

func (fsm *CatFSM) SetPanicHook(hook EventPanicHook) {
	fsm._Hooks[6] = hook
}

type EventMeowHook func(Count int8)

func (fsm *CatFSM) Meow(Count int8) error {
	switch fsm.State {
	case STATE_WALKING, STATE_RUNNING, STATE_IDLE:
	default:
		return fmt.Errorf("attempted to invoke event Meow from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State, "Count", Count).Info("User has transitioned to STATE_MEOW")
	hook := fsm._Hooks[7].(EventMeowHook)
	hook(Count)
	fsm.State = STATE_MEOWING
	return nil
}

func (fsm *CatFSM) SetMeowHook(hook EventMeowHook) {
	fsm._Hooks[7] = hook
}

type EventStop_PurringHook func()

func (fsm *CatFSM) Stop_Purring() error {
	switch fsm.State {
	case STATE_PURRING:
	default:
		return fmt.Errorf("attempted to invoke event Stop_Purring from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State).Info("User has transitioned to STATE_STOP_PURRING")
	hook := fsm._Hooks[8].(EventStop_PurringHook)
	hook()
	fsm.State = STATE_IDLE
	return nil
}

func (fsm *CatFSM) SetStop_PurringHook(hook EventStop_PurringHook) {
	fsm._Hooks[8] = hook
}

type EventSleepHook func()

func (fsm *CatFSM) Sleep() error {
	switch fsm.State {
	case STATE_IDLE:
	default:
		return fmt.Errorf("attempted to invoke event Sleep from invalid state: %v", fsm.State)
	}
	slog.With("Start State", fsm.State).Info("User has transitioned to STATE_SLEEP")
	hook := fsm._Hooks[9].(EventSleepHook)
	hook()
	fsm.State = STATE_SLEEPING
	return nil
}

func (fsm *CatFSM) SetSleepHook(hook EventSleepHook) {
	fsm._Hooks[9] = hook
}
