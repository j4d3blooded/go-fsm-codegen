package main

const HEADER = `

// Code generated by go generate; DO NOT EDIT.

package %v

import (
	"fmt"
`

const STATES_DEF = `
type State %v

const(
	%v State = iota
`

const FSM_DEF = `
type %vFSM struct {
	State State
	_Hooks map[%v]any
}
`

const EVENT = `
type Event%vHook func(%v)

func (fsm *%vFSM) %v(%v) error {
	switch fsm.State {
	case %v:
	default:
		return fmt.Errorf("attempted to invoke event %v from invalid state: %v", fsm.State)
	}
	%v
	hook := fsm._Hooks[%v].(Event%vHook)
	hook(%v)
	fsm.State = %v
	return nil
}

func (fsm *%vFSM) Set%vHook(hook Event%vHook) {
	fsm._Hooks[%v] = hook
}
`

const INIT = `
func NewFSM(startState State) *%vFSM {
	return &%vFSM{
		startState,
		map[%v]any{},
	}
}
`
